---
- name: Fail if component not selected
  ansible.builtin.fail:
    msg: Invalid aap_component value. Valid values are 'controller' and 'automationhub'
  when: aap_component is undefined

- name: Fail if unknown component
  ansible.builtin.fail:
    msg: Invalid aap_component value. Valid values are 'controller' and 'automationhub'
  when:
    - aap_component != 'controller'
    - aap_component != 'automationhub'

- name: Include vars
  ansible.builtin.include_vars:
    file: "vars/{{ aap_component }}.yml"

- name: "aap: set aap_installed_package"
  ansible.builtin.set_fact:
    aap_installed_package: "{{ __aap_installed_package_default }}"
  when: aap_installed_package is undefined

- name: Ensure Ansible is installed
  ansible.builtin.package:
    name: ansible
    state: present
  when: require_installed_ansible | bool

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Ensure setup dir is created
  ansible.builtin.file:
    path: "{{ aap_setup_dir }}"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: Download Ansible Automation Platform bundle
  ansible.builtin.include_tasks:
    file: download.yml

- name: Unzip the latest Ansible Automation Platform software
  ansible.builtin.unarchive:
    src: "{{ aap_setup_dir }}/aap.tar.gz"
    dest: "{{ aap_setup_dir }}"
    remote_src: true
  when: aap_installed_package not in ansible_facts.packages

- name: Find installer absolute path
  ansible.builtin.find:
    paths: "{{ aap_setup_dir }}"
    patterns: "{{ aap_setup_pkg_pattern | default(__aap_setup_pkg_pattern_default) }}"
    file_type: directory
    recurse: false
  register: aap_setup_find

- name: "aap: Set aap_setup_dir_full"
  ansible.builtin.set_fact:
    aap_setup_dir_full: "{{ aap_setup_find.files[0].path }}"

- name: "aap: Set install script facts"
  ansible.builtin.set_fact:
    aap_setup_script: "{{ aap_setup_dir_full }}/setup.sh"
    aap_inventory_path: "{{ aap_setup_dir_full }}/inventory"

- name: Create Automation Platform inventory file
  ansible.builtin.template:
    src: aap-inventory.j2
    dest: "{{ aap_inventory_path }}"
    owner: root
    group: root
    mode: 0600
    backup: true

- name: Run Automation Platform installer
  ansible.builtin.shell:
    cmd: "{{ aap_setup_script }} -i {{ aap_inventory_path }} -e 'required_ram={{ aap_required_ram | default(7400) }}'"
    chdir: "{{ aap_setup_dir_full }}"
  when: aap_installed_package not in ansible_facts.packages


# Post task needed in 2.0 at least
- name: Run Automation Platform installer
  ansible.builtin.shell:
    cmd: "awx-manage register_default_execution_environments --registry-url https://registry.redhat.io --registry-username '{{ subs_username }}' --registry-password '{{ subs_pw }}' --verify-ssl true"
  become: awx
