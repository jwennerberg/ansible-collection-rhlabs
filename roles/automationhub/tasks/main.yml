---
- name: Ensure Ansible is installed
  ansible.builtin.package:
    name: ansible
    state: present

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Ensure setup dir is created
  ansible.builtin.file:
    path: "{{ ap_setup_dir }}"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: Unzip the latest automation hub software
  ansible.builtin.unarchive:
    src: "{{ ap_setup_package_url }}"
    dest: "{{ ap_setup_dir }}"
    remote_src: yes
  when: "'automation-hub' not in ansible_facts.packages"

- name: Find installer absolute path
  ansible.builtin.find:
    paths: "{{ ap_setup_dir }}"
    patterns: "{{ ap_setup_pkg_pattern }}"
    file_type: directory
    recurse: false
  register: ap_setup_find

- name: Set install directory fact
  ansible.builtin.set_fact:
    ap_setup_dir_full: "{{ ap_setup_find.files[0].path }}"

- name: Set install script facts
  ansible.builtin.set_fact:
    ap_setup_script: "{{ ap_setup_dir_full }}/setup.sh"
    ap_inventory_path: "{{ ap_setup_dir_full }}/inventory"

- name: Set ap_admin_password fact
  ansible.builtin.set_fact:
    ap_admin_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"
  no_log: true
  when: ap_admin_password is not defined

- name: Set ap_pg_password fact
  ansible.builtin.set_fact:
    ap_pg_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"
  no_log: true
  when: ap_pg_password is not defined

- name: Create Automation Platform inventory file
  ansible.builtin.template:
    src: ap-inventory.j2
    dest: "{{ ap_inventory_path }}"
    owner: root
    group: root
    mode: 0600
  when: "'automation-hub' not in ansible_facts.packages"

- name: Run Automation Platform installer
  ansible.builtin.shell:
    cmd: "{{ ap_setup_script }} -i {{ ap_inventory_path }}"
    chdir: "{{ ap_setup_dir_full }}"
  when: "'automation-hub' not in ansible_facts.packages"
